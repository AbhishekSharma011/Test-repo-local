name: CI/CD - Build & Deploy (EC2 Self-Hosted)

on:
  push:
    branches: [ "dev", "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create backend/.env
        run: |
          set -euo pipefail
          mkdir -p backend
          printf "%s" "${{ secrets.BACKEND_ENV_DEV }}" > backend/.env
          chmod 600 backend/.env

      - name: Verify Docker & Compose
        run: |
          docker version
          docker compose version

      - name: Disk & Docker usage (before)
        run: |
          df -h
          docker system df || true

      - name: Pre-clean Docker cache
        run: |
          docker builder prune -af
          docker system prune -af
 

      - name: Build containers (with env)
        run: |
          set -euo pipefail
          docker compose --env-file backend/.env build --pull

      - name: Start/Update stack (apps only; keep DB up)
        run: |
          set -euo pipefail
          docker compose --env-file backend/.env up -d --force-recreate --no-deps backend frontend

      # --- smoke checks ---
      - name: Smoke check - backend on :5000 (IPv4)
        run: |
          set -e
          for i in {1..30}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5000/api/health || true)
            if [ "$code" = "200" ]; then echo "Backend OK at /api/health"; exit 0; fi
            # fallback to root if no health route
            code2=$(curl -s -o /dev/null -w "%{http_code}" http://127.0.0.1:5000/ || true)
            if [ "$code2" = "200" ]; then echo "Backend OK at /"; exit 0; fi
            sleep 2
          done
          echo "Backend did not become healthy"; exit 1

      - name: Smoke check - frontend on :80 (IPv4)
        run: |
          # -4 forces IPv4 so we don't hit ::1
          curl -4 -sS -I http://localhost/ | head -n 1

      - name: Show status & recent logs (non-fatal)
        if: always()
        run: |
          docker compose --env-file backend/.env ps || true
          echo "---- Backend logs (tail) ----"
          docker compose --env-file backend/.env logs --no-color --tail=200 backend || true
          echo "---- Frontend logs (tail) ----"
          docker compose --env-file backend/.env logs --no-color --tail=200 frontend || true
          echo "---- Postgres logs (tail) ----"
          docker compose --env-file backend/.env logs --no-color --tail=80 postgres || true

      # --- cleanup so the tiny disk doesn't choke next run ---
      - name: Cleanup Docker cache
        if: always()
        run: |
          docker system prune -af
          docker builder prune -af
          docker volume ls -qf dangling=true | xargs -r docker volume rm

      - name: Cleanup old runner workdirs (safe)
        if: always()
        env:
          ROOT: ${{ env.RUNNER_WORKSPACE }}
        run: |
          echo "Runner workspace: ${ROOT:-$RUNNER_WORKSPACE}"
          find "${ROOT:-$RUNNER_WORKSPACE}" -mindepth 1 -maxdepth 1 -type d -mtime +2 \
            ! -path "${GITHUB_WORKSPACE}" -exec rm -rf {} + || true

      - name: Disk & Docker usage (after)
        if: always()
        run: |
          df -h
          docker system df || true
