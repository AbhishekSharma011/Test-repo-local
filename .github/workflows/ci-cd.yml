name: CI/CD - Build & Deploy (EC2 Self-Hosted)

on:
  push:
    branches: [ "dev", "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create backend/.env
        run: |
          set -euo pipefail
          mkdir -p backend
          printf "%s" "${{ secrets.BACKEND_ENV_DEV }}" > backend/.env
          chmod 600 backend/.env

      - name: Verify Docker & Compose
        run: |
          docker version
          docker compose version

      - name: Disk & Docker usage (before)
        run: |
          df -h
          docker system df || true

      - name: Build containers (with env)
        run: |
          set -euo pipefail
          docker compose --env-file backend/.env build --pull

      - name: Start/Update stack (with env)
        run: |
          set -euo pipefail
          docker compose --env-file backend/.env up -d --force-recreate --remove-orphans

      # Optional: quick smoke-checks so success is explicit
      - name: Smoke check - frontend on :80
        run: |
          curl -sS -I http://localhost/ | head -n 1

      - name: Show status & recent logs (non-fatal)
        if: always()
        run: |
          docker compose --env-file backend/.env ps || true
          echo "---- Backend logs (tail) ----"
          docker compose --env-file backend/.env logs --no-color --tail=200 backend || true
          echo "---- Frontend logs (tail) ----"
          docker compose --env-file backend/.env logs --no-color --tail=200 frontend || true
          echo "---- Postgres logs (tail) ----"
          docker compose --env-file backend/.env logs --no-color --tail=80 postgres || true

      # --- cleanup so the tiny disk doesn't choke next run ---
      - name: Cleanup Docker cache
        if: always()
        run: |
          docker system prune -af
          docker builder prune -af
          docker volume ls -qf dangling=true | xargs -r docker volume rm

      - name: Cleanup old runner workdirs (safe)
        if: always()
        env:
          ROOT: ${{ env.RUNNER_WORKSPACE }}
        run: |
          echo "Runner workspace: ${ROOT:-$RUNNER_WORKSPACE}"
          find "${ROOT:-$RUNNER_WORKSPACE}" -mindepth 1 -maxdepth 1 -type d -mtime +2 \
            ! -path "${GITHUB_WORKSPACE}" -exec rm -rf {} + || true

      - name: Disk & Docker usage (after)
        if: always()
        run: |
          df -h
          docker system df || true
