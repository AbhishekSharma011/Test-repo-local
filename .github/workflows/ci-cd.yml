name: CI/CD - Build & Deploy (EC2 Self-Hosted)

on:
  push:
    branches: [ "dev", "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    # if you created an Environment in GitHub named "dev" or "prod", set it here:
    # environment: dev
    runs-on: [self-hosted, linux]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # NEW: Create .env from GitHub Secrets (never printed to logs)
      - name: Create .env
        shell: bash
        run: |
          set -euo pipefail
          cat > .env <<'EOF'
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          PORT=${{ secrets.PORT || '5000' }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          TWITTER_BEARER_TOKEN=${{ secrets.TWITTER_BEARER_TOKEN }}
          TWITTER_CLIENT_ID=${{ secrets.TWITTER_CLIENT_ID }}
          TWITTER_CLIENT_SECRET=${{ secrets.TWITTER_CLIENT_SECRET }}
          TWITTER_CALLBACK_URL=${{ secrets.TWITTER_CALLBACK_URL }}
          TWITTER_ACCESS_TOKEN=${{ secrets.TWITTER_ACCESS_TOKEN }}
          TWITTER_ACCESS_SECRET=${{ secrets.TWITTER_ACCESS_SECRET }}
          OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
          OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}
          LINKEDIN_CLIENT_ID=${{ secrets.LINKEDIN_CLIENT_ID }}
          LINKEDIN_CLIENT_SECRET=${{ secrets.LINKEDIN_CLIENT_SECRET }}
          LINKEDIN_CALLBACK_URL=${{ secrets.LINKEDIN_CALLBACK_URL }}
          # Puppeteer hardening
          PUPPETEER_ARGS=--no-sandbox --disable-setuid-sandbox
          EOF
          chmod 600 .env

      - name: Verify Docker & Compose
        run: |
          docker version
          docker compose version

      - name: Build containers
        run: |
          docker compose build --pull

      - name: Start/Update stack
        run: |
          docker compose up -d --force-recreate --remove-orphans

      - name: Show status
        if: always()
        run: |
          docker compose ps
          echo "---- Backend logs (tail) ----"
          docker compose logs --no-color --tail=200 backend || true
          echo "---- Frontend logs (tail) ----"
          docker compose logs --no-color --tail=200 frontend || true
