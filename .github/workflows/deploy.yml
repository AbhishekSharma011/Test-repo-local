name: Deploy (Host EC2)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch: {}

jobs:
  deploy:
    # match your native runner's labels
    runs-on: [self-hosted, linux, x64, host]

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # --- Fix Windows CRLF and ensure shell scripts are executable ---
      - name: Normalize shell scripts + chmod
        shell: bash
        run: |
          # strip CRLF on any .sh we may have (safe no-ops on LF files)
          find . -type f -name "*.sh" -print0 | xargs -0 sed -i 's/\r$//'
          # specifically ensure backend entrypoint is executable
          chmod +x backend/entrypoint.sh

      # --- Optional cleanup to keep host tidy (safe to keep) ---
      - name: Clean dangling images/networks (optional)
        run: |
          docker compose down --remove-orphans || true
          docker system prune -af || true

      # --- Build both images (compose will use your root docker-compose.yml) ---
      - name: Build images
        run: docker compose build --pull

      # --- Run (or re-run) the stack ---
      - name: Start stack
        run: docker compose up -d --force-recreate --remove-orphans

      # --- Quick smoke checks (adjust ports/routes if needed) ---
      - name: Health checks
        shell: bash
        run: |
          sleep 5
          echo "Backend HEAD:" && (curl -fsS -I http://localhost:5000 || true)
          echo "Frontend HEAD:" && (curl -fsS -I http://localhost || curl -fsS -I http://localhost:80 || true)

      # --- Always show status/logs to speed up debugging ---
      - name: Show compose status
        if: always()
        run: |
          docker compose ps
          echo "---- Backend logs (tail) ----"
          docker compose logs --no-color --tail=200 backend || true
          echo "---- Frontend logs (tail) ----"
          docker compose logs --no-color --tail=200 frontend || true
